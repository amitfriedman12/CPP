// project 1.cpp : main project file.

#include "stdafx.h"
#include <string>
#include <fstream>
#include <vector>
#include <math.h>
#include <algorithm>
#include <iostream>


using namespace std;

/**************************************************************************************
*sign function
*Input: a long double x.
*Purpose: Find and return the sign of x.
*return:
	-1 if x is negative
	0 if x is = zero.
	1 if x is positive
**************************************************************************************/
int sign(long double x){
	return ((x>0) - (x<0));
}

int main(array<System::String ^> ^args)
{
	long double PI = 3.1415926535897932385128089594;
	double alpha;

	// Get alpha
	cout<<"Enter alpha (bigger than 0 and less than 360)\n";
	cin>>alpha;
	while( (0>=alpha)||(alpha>=360) ){
		cout<<"Invald input. Enter alpha betwenn 0 and 360 please.\n";
		cin>>alpha;
	}
	
	// Get file name
	string file_name;
	cout<<"\nEnter file name to read points from (for example: points.txt).\n";
	cout<<"File should be included under the project. For example:";
	cout<<"\nC->Users->user->Documents->Visual Studio 2010->Projects->project 1->project 1->\npoints.txt\n";
	
	cin>>file_name;

	ifstream fin;	
	fin.open(file_name.c_str( ));
	
	//Make sure file name is correct
	while(!fin.is_open()){
		cout<<"Enter correct file name please!\n";
		cin>>file_name;
		fin.open(file_name.c_str( ));
	}

	vector<long double> x;  
	vector<long double> y;
	long double t;
	int i=1;

	//Read input from the file
	while(fin >> t){
			if(i%2==1)
				x.push_back(t);
			else
				y.push_back(t);
		i = i +1;
	}

/*	
	This much simpler code doesn't compile correctly for me for some reason
	
	long double s;
	while(fin >> t >>s){
				x.push_back(t);
				y.push_back(t);
	}*/


	fin.close( );
		
	// Convert x,y rectangular coordinates to polar coordinates
	//When doing This we must consider the quadrant in which (x,y) is in
	int n = x.size();	
	vector<long double> v;
	for(int i =0; i<n; ++i)
	{
	if( x[i]==0 && y[i]==0)   // Point is invalid, (0,0) does not yield an angle
		cout<<"Note that point number "<<i+1<<" that was entered, is not a valid point because both x and y equal to 0.\n";
	else if(x[i] == 0)		// Point is on the Y-AXIS
		v.push_back(180 - 90*sign(y[i]));    // if x=0 and y>0 then push back 90, if x=0 and y<0 then push back 270
	else if(y[i] == 0)		// point is on the X-AXIS
		v.push_back(90 - 90*sign(x[i]));	// if y=0 and x>0 then push back 0, if y=0 and x<0 then push back 180
	else if( x[i]*y[i] > 0 )			// Both have the same sign: both are positive, or both are negative (First or third quadrant)
		v.push_back( 90*(1-sign(x[i])) + atan(y[i]/x[i])*(180/PI) );
	else		// if(x[0]*y[0] < 0)=> x and y have an opposite sign: one is positive and one is negative (Second or forth quadrant)
		v.push_back( 90*(1+sign(x[i])) + 180 + atan(y[i]/x[i])*(180/PI) ); //Note we do not allow negative angles. All angles are between 0 and 360
	}	


	vector<int> counter;
	n = v.size();
	sort(v.begin(), v.end());

	cout<<"\nThe angles sorted from smallest to biggest are:\n";
	for(int i=0; i<n; i++){
			cout<<i+1<<") "<<v[i]<<"\n";
	} 


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This section is the only part I changed!

	bool check = true;
	int k = 1;
	counter.push_back(1);

	//Run through the first, smallest angle (special case)
	while(check){
		if(k<n){
			if((v[0] <= v[k]) && (v[k] <= v[0] + alpha)){
					counter[0] = counter[0] + 1;
					k++;
			}
			else
				check = false;
		}
		else{   //In the case when v[0]+alpha >360
			if(v[k-n]< v[0]+alpha-360){
				counter[0] = counter[0] + 1;
				k++;
			}
			else
				check=false;
		}
	}

	// For each angle beta, count the number of angles within the range beta, to beta plus alpha
	for(int i=1; i< n; i++)
	{
		k = 0;	
		counter.push_back(counter[i-1]-1);    // Angle i, will have AT LEAST counter[i-1]-1 points in its range
		check = true;						
		int j;

		while(check){
			j = i + (counter[i-1] - 1) + k;		// Angle i will contain all the points in the alpha ray of v[i-1], not including v[i-1] (hence the -1)
			
			if(j<n){
				if((v[i] <= v[j]) && (v[j] <= v[i] + alpha)){
					counter[i] = counter[i] + 1;
					k++;
				}
				else
					check = false;
			}
			else{        //This is to check the case where v[i]+alpha > 360 
				if(v[j-n] <= v[i] + alpha - 360){
					counter[i] = counter[i] + 1;
					k++;
				}
				else
					check = false;
			}
		}
		
	}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	

	int max = 1;
	int max_i = 0;

	//Check which angles contains the most angles within its ray of width alpha
	for(int i=0; i< n; i++){
		if(counter[i] > max){
			max = counter[i];
			max_i = i; 
		}

	}
	
	
	
	cout<<"\n\nThe angle that yielded the most points within its range is the angle "<<v[max_i]<<".\n";
	cout<<"That is, "<<max<<" angles were included between the angle of\n"<<v[max_i]<<" and "<<v[max_i]<<"+"<<alpha<<" = "<<v[max_i]+alpha;
	if(v[max_i]+alpha >= 360)
		cout<<" = "<<v[max_i]+alpha-360;
	
	cout<<".\n";

	cout<<"The angles that were included were: \n";
	for(int i=0; i < max; i++){
		if(max_i + i<n)
			cout<<i+1<<". "<<v[max_i +i]<<"\n";
		else 
			cout<<i+1<<". "<<v[max_i +i-n]<<"\n";
	}


	cout<<"\n\nPress any key then enter to exit\n";
	string word;
	cin>>word;

    return 0;
}
